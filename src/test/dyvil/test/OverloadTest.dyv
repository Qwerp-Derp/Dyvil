package dyvil.test

public class OverloadTest
{
	interface A
	interface B
	class C implements A, B

	// ----------------- f section -----------------

	public static String f(int i) = "f(int)"
	public static String f(Object o) = "f(Object)"
	public static String f(String s) = "f(String)"

	public static String f(Object o, Object o) = "f(Object, Object)"
	public static String f(Object o, String s) = "f(Object, String)"
	public static String f(String s, Object o) = "f(String, Object)"
	public static String f(String s1, String s2) = "f(String, String)"

	public static String f() = "f()"
	public static String f(Object... os) = "f(Object...)"

	public static String f(String s, String... ss) = "f(String, String...)"
	public static String f(String s, Object... os) = "f(String, Object...)"

	public static String f(Object o, Object... os) = "f(Object, Object...)"
	public static String f(Object o, String... ss) = "f(Object, String...)"

	// ----------------- g section -----------------

	// @BytecodeName("g_intList") // will be auto-name-mangled
	public static String g(List<int> ints) = "g(List<int>)"

	// @BytecodeName("g_stringList")
	public static String g(List<String> strings) = "g(List<String>)"

	@BytecodeName("g_intSet")
	public static String g<T extends Set<int>>(T ints) = "g(Set<int>)"

	@BytecodeName("g_stringSet")
	public static String g<T: Set<String>>(T strings) = "g(Set<String>)"

	// ----------------- h section -----------------

	@BytecodeName("h_ints")
	public static String h(List<int> ints) = "h(List<int>)"

	@BytecodeName("h_longs")
	public static String h(List<long> longs) = "h(List<long>)"

	@BytecodeName("h_floats")
	public static String h(List<float> floats) = "h(List<float>)"

	@BytecodeName("h_doubles")
	public static String h(List<double> doubles) = "h(List<double>)"

	// ----------------- main test -----------------

	@OverloadPriority
	public static String i(A a) = "i(A)"
	public static String i(B b) = "i(B)"

	public static void main([String] args)
	{
		Object o = null
		String s = ""
		int i = 0

		Main.test("Overload Test 0.1", "f()", f())

		Main.test("Overload Test 1.1", "f(Object)", f(o))
		Main.test("Overload Test 1.2", "f(String)", f(s))
		Main.test("Overload Test 1.3", "f(int)",    f(i))

		Main.test("Overload Test 2.1", "f(Object, Object)",    f(o, o))
		Main.test("Overload Test 2.2", "f(Object, String)",    f(o, s))
		Main.test("Overload Test 2.3", "f(String, Object)",    f(s, o))
		Main.test("Overload Test 2.4", "f(String, String)",    f(s, s))

		Main.test("Overload Test 3.1", "f(Object, Object...)", f(o, o, o))
		Main.test("Overload Test 3.2", "f(Object, Object...)", f(o, o, s))
		Main.test("Overload Test 3.3", "f(Object, Object...)", f(o, s, o))
		Main.test("Overload Test 3.4", "f(Object, String...)", f(o, s, s))

		Main.test("Overload Test 4.1", "f(String, Object...)", f(s, s, o))
		Main.test("Overload Test 4.2", "f(String, String...)", f(s, s, s))
		Main.test("Overload Test 4.3", "f(String, Object...)", f(s, o, o))
		Main.test("Overload Test 4.4", "f(String, Object...)", f(s, o, s))

		Main.test("Overload Test 5.1", "g(List<int>)", g(List<int>))
		Main.test("Overload Test 5.2", "g(List<String>)", g(List<String>))
		Main.test("Overload Test 5.3", "g(Set<int>)", g(Set<int>))
		Main.test("Overload Test 5.4", "g(Set<String>)", g(Set<String>))

		Main.test("Overload Test 6.1", "h(List<int>)", h(List<int>))
		Main.test("Overload Test 6.2", "h(List<long>)", h(List<long>))
		Main.test("Overload Test 6.3", "h(List<float>)", h(List<float>))
		Main.test("Overload Test 6.4", "h(List<double>)", h(List<double>))

		testPriority()
	}

	public static func testPriority: void
	{
		let c = new C
		Main.test("Overload Priority Test 1", "i(A)", i(c)) // i(A) has priority
		Main.test("Overload Priority Test 2", "i(A)", i(a: c))
		Main.test("Overload Priority Test 3", "i(B)", i(b: c))
	}
}
