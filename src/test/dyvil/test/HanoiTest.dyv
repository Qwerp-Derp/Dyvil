package dyvil.test

public class HanoiTest
{
	private List<String> moves = List<String>

	public static void main([String] args)
	{
		for (int i <- 1 .. 10)
		{
			let test = new HanoiTest(i)
			Main.test("Hanoi Test \(i)", requiredMoves(i), test.moves.size)
		}
	}

	public static int requiredMoves(int n) = (1 << n) - 1

	@dyvil.lang.literal.StringConvertible
	class Tower(public final String id) extends dyvil.collection.mutable.LinkedList<int>
	{
		public static Tower apply(String id) = new Tower(id)
	}

	public init() {Â }

	public init(int n)
	{
		this.run(n)
	}

	public void run(int n)
	{
		this.moves.clear()

		Tower source = 'source'
		for (var i <- 1 .. n) source.push(i)	// fill the tower

		this.move(n, source, 'helper', 'target')
	}

	public void move(Tower from, Tower to)
	{
		int item = from.pop()
		this.moves.add "Move \(item) from \(from.id) to \(to.id)"
		to.push(item)
	}

	public void move(int n, Tower from, Tower helper, Tower to)
	{
		if n > 0
		{
			this.move(n - 1, from, to, helper)	// from -> helper
			this.move(from, to)			// from -> to
			this.move(n - 1, helper, from, to)	// helper -> to
		}
	}
}
