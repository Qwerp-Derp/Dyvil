package dyvil.test

infix operator <<< { 120 }

public class TypeTest
{
	case class MyList<T>(T... elements)
	{
		public double sum(MyList<double> this)
		{
			double result = 0D
			for (Object d <- this.elements)
			{
				result += d as double
			}

			return result
		}
	}

	infix func <<< <T, C <: Collection<T>>(C collection, T element) = collection.added(element)

	static func voidTest<T>(T value) = "\(value)" // will error if CovariantTypeVarType.isSameType(Types.VOID) returns true

	public static void main([String] args)
	{
		var list = MyList(1D, 2D, 3D)
		var result = list.sum

		// var error1 = MyList(1, 2, 3).sum
		// var error2 = MyList("a", "b", "c").sum

		Main.test("Self Type Test", result, 6D, result == 6D)

		List(1, 2, 3) <<< 1
	}
}
