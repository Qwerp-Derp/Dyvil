// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.array;

import dyvil.annotation.Immutable;
import dyvil.annotation.Intrinsic;
import dyvil.annotation.Mutating;
import dyvil.annotation.Reified;
import dyvil.annotation.OverloadPriority;
import dyvil.annotation.internal.DyvilModifiers;
import dyvil.annotation.internal.Primitive;
import dyvil.collection.List;
import dyvil.collection.ImmutableList;
import dyvil.collection.Range;
import dyvil.collection.immutable.ArrayList;

#if IS_RANGEABLE
import dyvil.annotation.internal.DyvilName;

	#if HAS_RANGE_CLASS
import dyvil.collection.range.closed.TYPE_NAME##Range;
	#endif

#endif

import dyvil.ref.TYPE_NAME##Ref;
import dyvil.ref.array.TYPE_NAME##ArrayRef;
import dyvil.reflect.Modifiers;

import java.util.Arrays;
import java.util.function.*;
import java.lang.reflect.Array;

import static dyvil.reflect.Opcodes.*;

@SuppressWarnings({ "cast", "RedundantCast" })
public abstract class TYPE_NAME##Array
{
	public static final PRIMITIVE[] EMPTY = new PRIMITIVE[0];

	@DyvilModifiers(Modifiers.INLINE)
	public static PRIMITIVE[] apply()
	{
		return new PRIMITIVE[0];
	}

	@DyvilModifiers(Modifiers.INLINE)
	public static PRIMITIVE[] apply(int size)
	{
		return new PRIMITIVE[size];
	}

	@DyvilModifiers(Modifiers.INLINE)
	public static PRIMITIVE[] apply(PRIMITIVE[] array)
	{
		return array.clone();
	}

#if HAS_RANGE_CLASS
	@DyvilModifiers(Modifiers.IMPLICIT | Modifiers.INLINE)
	public static PRIMITIVE[] apply(TYPE_NAME##Range range)
	{
		return range.to##TYPE_NAME##Array();
	}
#endif

	public static PRIMITIVE[] apply(int size, PRIMITIVE repeatedValue)
	{
		final PRIMITIVE[] array = new PRIMITIVE[size];
		for (int i = 0; i < size; i++)
		{
			array[i] = repeatedValue;
		}
		return array;
	}

	public static PRIMITIVE[] apply(int size, SUPPLIER valueSupplier)
	{
		final PRIMITIVE[] array = new PRIMITIVE[size];
		for (int i = 0; i < size; i++)
		{
			array[i] = (PRIMITIVE) valueSupplier.SUPPLIER_GET();
		}
		return array;
	}

	public static PRIMITIVE[] apply(int size, INDEXED_SUPPLIER valueMapper)
	{
		final PRIMITIVE[] array = new PRIMITIVE[size];
		for (int i = 0; i < size; i++)
		{
			array[i] = (PRIMITIVE) valueMapper.INDEXED_SUPPLIER_APPLY(i);
		}
		return array;
	}

#if IS_RANGEABLE
	@DyvilName("apply")
	public static PRIMITIVE[] rangeClosed(PRIMITIVE from, PRIMITIVE to)
	{
		int index = 0;
		final PRIMITIVE[] array = new PRIMITIVE[(int) (to - from + 1)];
		for (; from <= to; from++)
		{
			array[index++] = from;
		}
		return array;
	}

	@DyvilName("apply")
	public static PRIMITIVE[] range(PRIMITIVE from, PRIMITIVE toExclusive)
	{
		int index = 0;
		final PRIMITIVE[] array = new PRIMITIVE[(int) (toExclusive - from)];
		for (; from < toExclusive; from++)
		{
			array[index++] = from;
		}
		return array;
	}
#endif

	// Basic Array Operations

	@Intrinsic({ LOAD_0, ARRAYLENGTH })
	@DyvilModifiers(Modifiers.INFIX)
	public static int length(PRIMITIVE[] array)
	{
		return array.length;
	}

	@Intrinsic({ LOAD_0, ARRAYLENGTH })
	@DyvilModifiers(Modifiers.INFIX)
	public static int size(PRIMITIVE[] array)
	{
		return array.length;
	}

	@Intrinsic({ LOAD_0, ARRAYLENGTH, EQ0 })
	@DyvilModifiers(Modifiers.INFIX)
	public static boolean isEmpty(PRIMITIVE[] array)
	{
		return array.length == 0;
	}

	@Intrinsic({ LOAD_0, LOAD_1, ARRAY_LOAD_INSN })
	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE subscript(PRIMITIVE[] array, int index)
	{
		return array[index];
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] subscript(PRIMITIVE[] array, Range<@Primitive Integer> range)
	{
		final int size = range.size();
		final PRIMITIVE[] result = new PRIMITIVE[size];
		System.arraycopy(array, range.first(), result, 0, size);
		return result;
	}

	@Intrinsic({ LOAD_0, LOAD_1, LOAD_2, ARRAY_STORE_INSN })
	@DyvilModifiers(Modifiers.INFIX)
	@Mutating
	public static void subscript_$eq(PRIMITIVE[] array, int index, PRIMITIVE newValue)
	{
		array[index] = newValue;
	}

	@DyvilModifiers(Modifiers.INFIX)
	@Mutating
	public static void subscript_$eq(PRIMITIVE[] array, Range<@Primitive Integer> range, PRIMITIVE[] newValues)
	{
		System.arraycopy(newValues, 0, array, range.first(), range.size());
	}

	@DyvilModifiers(Modifiers.INFIX)
	@Mutating
	public static TYPE_NAME##Ref subscript_$amp(PRIMITIVE[] array, int index)
	{
		return new TYPE_NAME##ArrayRef(array, index);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static void forEach(PRIMITIVE[] array, CONSUMER action)
	{
		for (PRIMITIVE value : array)
		{
			action.CONSUMER_ACCEPT(value);
		}
	}

	// Operators

	@DyvilModifiers(Modifiers.INFIX | Modifiers.INLINE)
	public static boolean $eq$eq(PRIMITIVE[] array1, PRIMITIVE[] array2)
	{
		return Arrays.equals(array1, array2);
	}

	@DyvilModifiers(Modifiers.INFIX | Modifiers.INLINE)
	public static boolean $bang$eq(PRIMITIVE[] array1, PRIMITIVE[] array2)
	{
		return !Arrays.equals(array1, array2);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] added(PRIMITIVE[] array, PRIMITIVE value)
	{
		final int size = array.length;
		final PRIMITIVE[] res = new PRIMITIVE[size + 1];
		System.arraycopy(array, 0, res, 0, size);
		res[size] = value;
		return res;
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] union(PRIMITIVE[] array1, PRIMITIVE[] array2)
	{
		final int len1 = array1.length;
		final int len2 = array2.length;
		final PRIMITIVE[] res = new PRIMITIVE[len1 + len2];
		System.arraycopy(array1, 0, res, 0, len1);
		System.arraycopy(array2, 0, res, len1, len2);
		return res;
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] removed(PRIMITIVE[] array, PRIMITIVE value)
	{
		int newSize = array.length;

		// Calculate number of element in new array
		for (PRIMITIVE element : array)
		{
			if (element == value)
			{
				newSize--;
			}
		}

		final PRIMITIVE[] res = new PRIMITIVE[newSize];
		int resIndex = 0;

		for (PRIMITIVE element : array)
		{
			if (element != value)
			{
				res[resIndex++] = element;
			}
		}
		return res;
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] difference(PRIMITIVE[] array1, PRIMITIVE[] array2)
	{
		int index = 0;
		final int size = array1.length;
		final PRIMITIVE[] res = new PRIMITIVE[size];

		for (PRIMITIVE v : array1)
		{
			if (indexOf(array2, v, 0) < 0)
			{
				res[index++] = v;
			}
		}

		// Return a resized copy of the temporary array
		return Arrays.copyOf(res, index);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] intersection(PRIMITIVE[] array1, PRIMITIVE[] array2)
	{
		int index = 0;
		final int size = array1.length;
		final PRIMITIVE[] res = new PRIMITIVE[size];

		for (PRIMITIVE v : array1)
		{
			if (indexOf(array2, v, 0) >= 0)
			{
				res[index++] = v;
			}
		}

		// Return a resized copy of the temporary array
		return Arrays.copyOf(res, index);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] mapped(PRIMITIVE[] array, MAPPER mapper)
	{
		final int size = array.length;
		final PRIMITIVE[] res = new PRIMITIVE[size];
		for (int i = 0; i < size; i++)
		{
			res[i] = (PRIMITIVE) mapper.MAPPER_APPLY(array[i]);
		}
		return res;
	}

	@DyvilModifiers(Modifiers.INFIX)
	@OverloadPriority
	public static <@Reified(Reified.Type.OBJECT_CLASS) T> T[] mapped(PRIMITIVE[] array, TO_MAPPER T TO_MAPPER_END mapper, Class<T> _type)
	{
		final int size = array.length;
		final T[] res = (T[]) Array.newInstance(_type, size);
		for (int i = 0; i < size; i++)
		{
			res[i] = (T) mapper.TO_MAPPER_APPLY(array[i]);
		}
		return res;
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] flatMapped(PRIMITIVE[] array, TO_MAPPER PRIMITIVE[] TO_MAPPER_END mapper)
	{
		int size = 0;
		PRIMITIVE[] res = new PRIMITIVE[array.length << 2];

		for (PRIMITIVE v : array)
		{
			final PRIMITIVE[] a = mapper.TO_MAPPER_APPLY(v);
			final int newSize = a.length;

			if (size + newSize >= res.length)
			{
				res = Arrays.copyOf(res, (size + newSize) << 1);
			}

			System.arraycopy(a, 0, res, size, newSize);
			size += newSize;
		}

		if (size == res.length)
		{
			return res;
		}
		return Arrays.copyOf(res, size);
	}

	@DyvilModifiers(Modifiers.INFIX)
	@OverloadPriority
	public static <@Reified(Reified.Type.OBJECT_CLASS) T> T[] flatMapped(PRIMITIVE[] array, TO_MAPPER ? extends Iterable<? extends T> TO_MAPPER_END mapper, Class<T> _type)
	{
		final List<T> list = new dyvil.collection.mutable.ArrayList<>(array.length << 2);

		for (PRIMITIVE value : array)
		{
			list.addAll(mapper.TO_MAPPER_APPLY(value));
		}

		return list.toArray(_type);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] filtered(PRIMITIVE[] array, PREDICATE condition)
	{
		int index = 0;
		final int size = array.length;
		final PRIMITIVE[] res = new PRIMITIVE[size];
		for (PRIMITIVE v : array)
		{
			if (condition.PREDICATE_TEST(v))
			{
				res[index++] = v;
			}
		}

		// Return a resized copy of the temporary array
		return Arrays.copyOf(res, index);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] sorted(PRIMITIVE[] array)
	{
#if USE_BOOL_SORT
		final int size = array.length;
		final boolean[] res = new boolean[size];

		// Count the number of 'false' entries in the array
		int falseEntries = 0;

		for (boolean value : array)
		{
			if (!value) falseEntries++;
		}

		// Make the remaining elements of the result true
		for (; falseEntries < size; falseEntries++)
		{
			res[falseEntries] = true;
		}
		return res;
#else
		final PRIMITIVE[] res = array.clone();
		Arrays.sort(res);
		return res;
#endif
	}

	// Search Operations

	@DyvilModifiers(Modifiers.INFIX | Modifiers.INLINE)
	public static boolean contains(PRIMITIVE[] array, PRIMITIVE value)
	{
		return indexOf(array, value, 0) >= 0;
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static int indexOf(PRIMITIVE[] array, PRIMITIVE value)
	{
		return indexOf(array, value, 0);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static int indexOf(PRIMITIVE[] array, PRIMITIVE value, int startIndex)
	{
		for (; startIndex < array.length; startIndex++)
		{
			if (array[startIndex] == value)
			{
				return startIndex;
			}
		}
		return -1;
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static int lastIndexOf(PRIMITIVE[] array, PRIMITIVE value)
	{
		return lastIndexOf(array, value, array.length - 1);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static int lastIndexOf(PRIMITIVE[] array, PRIMITIVE value, int startIndex)
	{
		for (; startIndex >= 0; startIndex--)
		{
			if (array[startIndex] == value)
			{
				return startIndex;
			}
		}
		return -1;
	}

	// Copying

	@DyvilModifiers(Modifiers.INFIX | Modifiers.INLINE)
	public static PRIMITIVE[] copy(PRIMITIVE[] array)
	{
		return array.clone();
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static PRIMITIVE[] copy(PRIMITIVE[] array, int size)
	{
		final PRIMITIVE[] newArray = new PRIMITIVE[size];
		System.arraycopy(array, 0, newArray, 0, array.length);
		return newArray;
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static WRAPPER[] boxed(PRIMITIVE[] array)
	{
		final int size = array.length;
		final WRAPPER[] boxed = new WRAPPER[size];
		for (int i = 0; i < size; i++)
		{
			boxed[i] = array[i];
		}
		return boxed;
	}

	@DyvilModifiers(Modifiers.INFIX | Modifiers.IMPLICIT)
	public static Iterable<@Primitive WRAPPER> asIterable(PRIMITIVE[] array)
	{
		return toList(array);
	}

	@DyvilModifiers(Modifiers.INFIX | Modifiers.IMPLICIT)
	public static ImmutableList<@Primitive WRAPPER> asList(PRIMITIVE @Immutable [] array)
	{
		return toList(array);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static ImmutableList<@Primitive WRAPPER> toList(PRIMITIVE[] array)
	{
		return new ArrayList<>(boxed(array), true);
	}

	// equals, hashCode and toString

	@DyvilModifiers(Modifiers.INFIX | Modifiers.INLINE)
	public static boolean equals(PRIMITIVE[] array1, PRIMITIVE[] array2)
	{
		return Arrays.equals(array1, array2);
	}

	@DyvilModifiers(Modifiers.INFIX | Modifiers.INLINE)
	public static int hashCode(PRIMITIVE[] array)
	{
		return Arrays.hashCode(array);
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static String toString(PRIMITIVE[] array)
	{
		if (array == null)
		{
			return "null";
		}

		final int size = array.length;
		if (size == 0)
		{
			return "[]";
		}

		final StringBuilder builder = new StringBuilder();
		append(array, size, builder);
		return builder.toString();
	}

	@DyvilModifiers(Modifiers.INFIX)
	public static void toString(PRIMITIVE[] array, StringBuilder builder)
	{
		if (array == null)
		{
			builder.append("null");
			return;
		}

		final int size = array.length;
		if (size == 0)
		{
			builder.append("[]");
			return;
		}

		append(array, size, builder);
	}

	private static void append(PRIMITIVE[] array, int size, StringBuilder builder)
	{
		builder.append('[').append(array[0]);
		for (int i = 1; i < size; i++)
		{
			builder.append(", ");
			builder.append(array[i]);
		}
		builder.append(']');
	}
}
