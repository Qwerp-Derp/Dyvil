package dyvil.lang

using	dyvil.reflect.Opcodes._

public final class LanguageCommons
{
	private init() {}

	// Blackhole

	@Intrinsic([ LOAD_0, AUTO_POP ])
	public static func consume(any value): void {}

	// Ternary Operator

	public infix func ? <T>(boolean condition, (-> T, -> T) branches): T = if (condition) branches._1() else branches._2()

	// Assertions

	public static void assert(boolean condition) = if (!condition) throw new AssertionError()

	public static void assert(boolean condition, -> any message) = if (!condition) throw new AssertionError(message())

	public static void assert((boolean, -> any) tuple) = if (!tuple._1) throw new AssertionError(tuple._2())

	// Errors

	public static inline void error(String message) = throw new Error(message)

	public static inline func ???(): void = throw new UnsupportedOperationException("Not Implemented!")

	// Output

	public static inline void println() = System.out.println()

	public static inline void println(boolean v) = System.out.println(v)

	public static inline void println(byte v) = System.out.println(v)

	public static inline void println(short v) = System.out.println(v)

	public static inline void println(char v) = System.out.println(v)

	public static inline void println(int v) = System.out.println(v)

	public static inline void println(long v) = System.out.println(v)

	public static inline void println(float v) = System.out.println(v)

	public static inline void println(double v) = System.out.println(v)

	public static inline void println(String s) = System.out.println(s)

	public static inline void println(Object o) = System.out.println(o)

	public static inline void println(boolean... v) = System.out.println(v.toString)

	public static inline void println(byte... v) = System.out.println(v.toString)

	public static inline void println(short... v) = System.out.println(v.toString)

	public static inline void println(char... v) = System.out.println(v.toString)

	public static inline void println(int... v) = System.out.println(v.toString)

	public static inline void println(long... v) = System.out.println(v.toString)

	public static inline void println(float... v) = System.out.println(v.toString)

	public static inline void println(double... v) = System.out.println(v.toString)

	public static inline void println(Object... v) = System.out.println(v.toString)
}
