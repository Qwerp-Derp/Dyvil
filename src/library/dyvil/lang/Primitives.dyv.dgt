package dyvil.lang

using   dyvil.reflect.Opcodes._

public abstract class Primitives
{
	private init() {}

	#define LOAD_CALL [ LOAD_0, INVOKESTATIC, 0, 1, 2 ]

	// --- Conversion Methods ---

	// Void Methods

	@Intrinsic([ ACONST_NULL ])
	public static Void Void() = null

	@Intrinsic([ /* NOOP */ ])
	public static void toVoid(Void value) = ()

	// GEN_NOTICE
	// Timestamp: TIME_STAMP
#foreach Base-Boolean.dgs, Base-Byte.dgs, Base-Short.dgs, Base-Char.dgs, Base-Int.dgs, Base-Long.dgs, Base-Float.dgs, Base-Double.dgs

	// TYPE_NAME Conversions

	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/WRAPPER", "valueOf", "(DESC_CHAR)Ljava/lang/WRAPPER;" ])
	public static WRAPPER TYPE_NAME(PRIMITIVE value) = TYPE_NAME(value)

	public postfix PRIMITIVE to##TYPE_NAME(WRAPPER value) = if (value == null) DEFAULT_VALUE else value.PRIMITIVE##Value
#endfor

	// --- equals Methods ---
#foreach Base-Boolean.dgs, Base-Byte.dgs, Base-Short.dgs, Base-Char.dgs, Base-Int.dgs, Base-Long.dgs, Base-Float.dgs, Base-Double.dgs

	// TYPE_NAME equals

	public infix inline boolean equals(PRIMITIVE v1, PRIMITIVE v2) = v1 == v2
#endfor

	// END OF GENERATED CODE

	public infix int compareTo(boolean b1, boolean b2) = if (b1 == b2) 0 else if (b1) 1 else -1

	// --- toString Methods ---

	// Boolean toString

	public postfix String toString(boolean value) = if (value) "true" else "false"

	// Char toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/String", "valueOf", "(C)Ljava/lang/String;" ])
	public infix String toString(char c) = String.valueOf(c)

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toString", "(I)Ljava/lang/String;" ])
	public infix String toDecimalString(char c) = c.toDecimalString

	// Int toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toString", "(I)Ljava/lang/String;" ])
	public infix String toString(int value) = value.toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toBinaryString", "(I)Ljava/lang/String;" ])
	public infix String toBinaryString(int value) = value.toBinaryString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toHexString", "(I)Ljava/lang/String;" ])
	public infix String toHexString(int value) = value.toHexString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toOctalString", "(I)Ljava/lang/String;" ])
	public infix String toOctalString(int value) = value.toOctalString

	public infix String toString(int value, int radix) =
		radix match {
			case 2: return value.toBinaryString
			case 8: return value.toOctalString
			case 10: return value.toString
			case 16: return value.toHexString
			case _ : return java.lang.Integer.toString(value, radix);
		}

	// Long toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Long", "toString", "(J)Ljava/lang/String;" ])
	public infix String toString(long value) = value.toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Long", "toHexString", "(J)Ljava/lang/String;" ])
	public infix String toHexString(long value) = value.toHexString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Long", "toBinaryString", "(J)Ljava/lang/String;" ])
	public infix String toBinaryString(long value) = value.toBinaryString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Long", "toOctalString", "(J)Ljava/lang/String;" ])
	public infix String toOctalString(long value) = value.toOctalString

	public infix String toString(long value, int radix) =
		radix match {
			case 2: return value.toBinaryString
			case 8: return value.toOctalString
			case 10: return value.toString
			case 16: return value.toHexString
			case _ : return java.lang.Long.toString(value, radix);
		}

	// Float toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Float", "toString", "(F)Ljava/lang/String;" ])
	public postfix String toString(float value) = value.toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Float", "toHexString", "(F)Ljava/lang/String;" ])
	public postfix String toHexString(float value) = value.toHexString

	// Double toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Double", "toString", "(D)Ljava/lang/String;" ])
	public postfix String toString(double value) = value.toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Double", "toHexString", "(D)Ljava/lang/String;" ])
	public postfix String toHexString(double value) = value.toHexString

	// --- hashCode Methods ---

	// Boolean hashCode

	public postfix int hashCode(boolean value) = if (value) 1231 else 1237

	// Int hashCode

	@Intrinsic([ LOAD_0 ])
	public postfix int hashCode(int value) = value

	// Long hashCode

	@Intrinsic([ LOAD_0, DUP2, BIPUSH, 32, LUSHR, LXOR, L2I ])
	public postfix int hashCode(long value) = value.hashCode

	// Float hashCode

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Float", "hashCode", "(F)I" ])
	public postfix int hashCode(float value) = value.hashCode

	// Double hashCode

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Double", "hashCode", "(D)I" ])
	public postfix int hashCode(double value) = value.hashCode
}
