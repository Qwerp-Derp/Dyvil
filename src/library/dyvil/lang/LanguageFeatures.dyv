package dyvil.lang

import	java.io.PrintStream
import	dyvilx.lang.model.`type`.Type
import	dyvil.annotation.Reified
import	dyvil.util.AutoPrinter
using	dyvil.reflect.Opcodes._

/**
 * Experimental Language Features
 */
@dyvil.annotation.Experimental
public final class LanguageFeatures
{
	private init() {}

	// Class and Type

	@Intrinsic([ LOAD_0 ])
	public static T cast<T>(any value) = cast<T>(value)

	public static Class<T> classOf<@Reified(true) T>(T value) = class T

	public static Type<T> typeOf<@Reified T>(T value) = type T

	// Increments

	public static void inc(int^ i, int n = 1) = *i = *i + n

	public static void inc(long^ l, long n = 1L) = *l = *l + n

	public static void inc(float^ f, float n = 1F) = *f = *f + n

	public static void inc(double^ d, double n = 1D) = *d = *d + n

	// Useful Globals

	public static inline R run<R>(-> R f) = f()

	public static infix inline R run<T, R>(T self, T.() -> R f) = f(self)

	public static infix inline T use<T>(T self, T.() -> void f)
	{
		f(self)
		return self
	}

	public static inline R with<T, R>(T receiver, T -> R f) = f(receiver)

	// I/O

	public const String ENDL = System.lineSeparator

	public infix inline func <<(PrintStream stream, any value): PrintStream
	{
		stream.print(value)
		return stream
	}

	public static inline func println(AutoPrinter.() -> void closure): void = closure(new AutoPrinter)

	// Timing

	public static inline long measureMillis(-> void f)
	{
		long millis = System.currentTimeMillis
		f()
		return System.currentTimeMillis - millis
	}

	public static inline long measureNanos(-> void f)
	{
		long nanos = System.nanoTime
		f()
		return System.nanoTime - nanos
	}
}
