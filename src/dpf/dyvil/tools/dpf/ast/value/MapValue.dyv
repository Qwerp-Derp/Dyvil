package dyvil.tools.dpf.ast.value;

import dyvil.collection.Entry;
import dyvil.collection.Map;
import dyvil.collection.mutable.ArrayMap;
import dyvil.tools.dpf.ast.Expandable;
import dyvil.tools.dpf.converter.DPFValueVisitor;
import dyvil.tools.dpf.visitor.MapVisitor;
import dyvil.tools.dpf.visitor.ValueVisitor;
import dyvil.tuple.Tuple2;

import java.util.function.BiFunction;

public class MapValue extends DPFValueVisitor implements Value, MapVisitor, Expandable
{
	protected Map<Value, Value> entries = new ArrayMap<Value, Value>

	private Value tempKey;
	
	public init() { }

	public init(Map<_, _> map)
	{
		let size = map.size
		this.entries = new ArrayMap<Value, Value>(size)

		for (Entry<_, _> entry <- map)
		{
			this.entries.put(Value.wrap(entry.getKey), Value.wrap(entry.getValue));
		}
	}

	protected override void setValue(Value value)
	{
		if (this.tempKey == null)
		{
			this.tempKey = value
		}
		else
		{
			this.entries.put(this.tempKey, value)
			this.tempKey = null
		}
	}

	public override ValueVisitor visitKey() = this

	public override ValueVisitor visitValue() = this

	public override void accept(ValueVisitor visitor)
	{
		MapVisitor mapVisitor = visitor.visitMap()

		for (Entry<Value, Value> entry <- this.entries)
		{
			entry.getKey.accept(mapVisitor.visitKey())
			entry.getValue.accept(mapVisitor.visitValue())
		}
		
		mapVisitor.visitEnd()
	}

	public override MapValue expand(Map<String, Object> mappings, boolean mutate)
	{
		final BiFunction<Value, Value, Entry<+Value, +Value>> entryBiFunction = (k, v) => (
				Value.wrap(Expandable.expand(k, mappings, true)),
				Value.wrap(Expandable.expand(v, mappings, mutate))
			)

		if (mutate)
		{
			this.entries.mapEntries(entryBiFunction)
			return this;
		}
		else
		{
			MapValue copy = new MapValue
			copy.entries = this.entries.entryMapped(entryBiFunction)
			return copy
		}
	}

	public override void toString(String indent, StringBuilder buffer)
	{
		let len = this.entries.size
		if (len <= 0)
		{
			buffer.append("{}")
			return;
		}

		[Value] keys = this.entries.toKeyArray(class Value)
		[Value] values = this.entries.toValueArray(class Value)
		
		String indent1 = indent + "\t";
		
		buffer.append("{\n").append(indent1)
		keys[0].toString(indent1, buffer)
		buffer.append(" : ")
		values[0].toString(indent1, buffer)
		for (int i <- 1 ..< len)
		{
			buffer.append(",\n").append(indent1)
			keys[i].toString(indent1, buffer)
			buffer.append(" : ")
			values[i].toString(indent1, buffer)
		}
		buffer.append('\n').append(indent).append('}')
	}

	public override boolean equals(Object o)
	{
		if (this === o) return true
		if (!(o is MapValue)) return false

		let that = o as MapValue
		return this.entries == that.entries
	}

	public override int hashCode() = this.entries.hashCode
}
