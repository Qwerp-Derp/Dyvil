package dyvil.tools.dpf.ast.value;

import dyvil.collection.Collection;
import dyvil.collection.List;
import dyvil.collection.Map;
import dyvil.collection.mutable.ArrayList;
import dyvil.tools.dpf.ast.Expandable;
import dyvil.tools.dpf.converter.DPFValueVisitor;
import dyvil.tools.dpf.visitor.ListVisitor;
import dyvil.tools.dpf.visitor.ValueVisitor;
import dyvil.tools.parsing.ast.IASTNode;

import java.util.function.Function;

public class ListValue extends DPFValueVisitor implements Value, ListVisitor, Expandable
{
	protected List<Value> elements;
	
	public init()
	{
		this.elements = new ArrayList<Value>
	}

	public init(int capacity)
	{
		this.elements = new ArrayList<Value>(capacity)
	}

	public init(Value... values)
	{
		this.elements = new ArrayList<Value>(values...)
	}

	public init(Iterable<_> iterable)
	{
		this.elements = new ArrayList<Value>
		for (Object element <- iterable)
		{
			this.elements.add(Value.wrap(element))
		}
	}

	public init(Collection<_> collection)
	{
		this.elements = new ArrayList<Value>(collection.size())
		for (Object element <- collection)
		{
			this.elements.add(Value.wrap(element))
		}
	}

	public void addValue(Value value)
	{
		this.elements.add(value)
	}

	protected override void setValue(Value value)
	{
		this.elements.add(value)
	}

	public override ValueVisitor visitElement()
	{
		return this;
	}

	public override void accept(ValueVisitor visitor)
	{
		ListVisitor v = visitor.visitList();
		for (Value element <- this.elements)
		{
			element.accept(v.visitElement());
		}
		
		v.visitEnd();
	}

	public override String toString()
	{
		return IASTNode.toString(this);
	}

	public override void toString(String indent, StringBuilder buffer)
	{
		let len = this.elements.size
		if (len <= 0)
		{
			buffer.append("[]")
			return
		}
		
		buffer.append("[ ")
		this.elements[0].toString(indent, buffer)
		for (int i <- 1 ..< len)
		{
			buffer.append(", ")
			this.elements[i].toString(indent, buffer)
		}
		buffer.append(" ]")
	}

	public override ListValue expand(Map<String, Object> mappings, boolean mutate)
	{
		final Function<Value, Value> valueFunction = value => Value.wrap(Expandable.expand(value, mappings, mutate));
		if (mutate)
		{
			this.elements.map(valueFunction)
			return this
		}
		else
		{
			let copy = new ListValue
			copy.elements = this.elements.mapped(valueFunction)
			return copy
		}
	}

	public override boolean equals(Object o)
	{
		if (this === o) return true
		if (!(o is ListValue)) return false

		let that = o as ListValue
		return this.elements == that.elements
	}

	public override int hashCode() = this.elements.hashCode
}
