package dyvil.tools.dpf.ast

import dyvil.collection.Collection
import dyvil.collection.List
import dyvil.collection.Map
import dyvil.collection.mutable.ArrayList
import dyvil.tools.dpf.visitor.NodeVisitor
import dyvil.tools.dpf.visitor.ValueVisitor
import dyvil.tools.parsing.Name
import dyvil.tools.parsing.ast.IASTNode
import dyvil.tools.parsing.position.ICodePosition

public class Node implements NodeElement, NodeVisitor, Expandable
{
	protected Name name = null
	{
		public override get
	}

	protected List<Node>       nodes        = new ArrayList<Node>
	protected List<Property>   properties   = new ArrayList<Property>
	protected List<NodeAccess> nodeAccesses = new ArrayList<NodeAccess>
	
	public init(Name name)
	{
		this.name = name
	}

	@BytecodeName("addNode")
	public func add(Node node): void = this.nodes.add(node)

	@BytecodeName("addNodeAccess")
	public func add(NodeAccess nodeAccess): void = this.nodeAccesses.add(nodeAccess)

	@BytecodeName("addProperty")
	public func add(Property property): void = this.properties.add(property)
	
	public override func visitNode(Name name): NodeVisitor
	{
		Node node = new Node(name)
		this.nodes.add(node)
		return node
	}
	
	public override func visitProperty(Name name): ValueVisitor
	{
		Property property = new Property(name)
		this.properties.add(property)
		return property
	}
	
	public override func visitNodeAccess(Name name): NodeVisitor
	{
		NodeAccess access = new NodeAccess(name)
		this.nodeAccesses.add(access)
		return access
	}
	
	public override func accept(NodeVisitor visitor): void
	{
		this.acceptBody(visitor.visitNode(this.name))
	}

	public internal func acceptBody(NodeVisitor nodeVisitor): void
	{
		for (var element <- this.properties)
		{
			element.accept(nodeVisitor)
		}
		for (var node <- this.nodes)
		{
			node.accept(nodeVisitor)
		}
		for (var nodeAccess <- this.nodeAccesses)
		{
			nodeAccess.accept(nodeVisitor)
		}
		nodeVisitor.visitEnd()
	}

	public override func expand(Map<String, Object> mappings, boolean mutate): Node
	{
		if (mutate)
		{
			this.expandChildren(mappings)
			return this
		}
		else
		{
			Node node = new Node(this.name)
			this.expand(node, mappings)
			return node
		}
	}

	protected func expandChildren(Map<String, Object> mappings): void
	{
		for (Node node <- this.nodes)
		{
			node.expand(mappings, true)
		}
		for (Property property <- this.properties)
		{
			property.expand(mappings, true)
		}
		for (NodeAccess nodeAccess <- this.nodeAccesses)
		{
			nodeAccess.expand(mappings, true)
		}
	}

	protected func expand(Node node, Map<String, Object> mappings): void
	{
		node.nodes = this.nodes.mapped(childNode => childNode.expand(mappings, false))
		node.properties = this.properties.mapped(property => property.expand(mappings, false))
		node.nodeAccesses = this.nodeAccesses.mapped(nodeAccess => nodeAccess.expand(mappings, false))
	}

	public override func toString(): String = IASTNode.toString(this)
	
	public override func toString(String indent, StringBuilder buffer): void
	{
		buffer.append(this.name).append('\n').append(indent).append('{').append('\n')
		
		this.bodyToString(indent + '\t', buffer)
		
		buffer.append(indent).append('}')
	}
	
	public func bodyToString(String indent, StringBuilder buffer): void
	{
		for (var element <- this.properties)
		{
			buffer.append(indent)
			element.toString(indent, buffer)
			buffer.append('\n')
		}
		
		for (var node <- this.nodes)
		{
			buffer.append(indent).append('\n').append(indent)
			node.toString(indent, buffer)
			buffer.append('\n')
		}

		for (var nodeAccess <- this.nodeAccesses)
		{
			buffer.append(indent).append('\n').append(indent)
			nodeAccess.toString(indent, buffer)
			buffer.append('\n')
		}
	}

	public override func equals(Object obj): boolean
	{
		if (this === obj) return true
		if (!(obj is Node)) return false

		let other = obj as Node

		if (this.name !== other.name) return false
		if (!Collection.unorderedEquals(this.properties, other.properties)) return false
		if (!Collection.unorderedEquals(this.nodes, other.nodes)) return false
		if (!Collection.unorderedEquals(this.nodeAccesses, other.nodeAccesses)) return false
		return true
	}

	public override func hashCode(): int
	{
		final int prime = 31
		int result = this.name.hashCode()
		result = prime * result + Collection.unorderedHashCode(this.properties)
		result = prime * result + Collection.unorderedHashCode(this.nodes)
		result = prime * result + Collection.unorderedHashCode(this.nodeAccesses)
		return result
	}
}
