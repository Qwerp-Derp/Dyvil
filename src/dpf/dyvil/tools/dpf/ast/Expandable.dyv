package dyvil.tools.dpf.ast;

import dyvil.collection.Collection;
import dyvil.collection.Map;
import dyvil.tuple.Tuple2;

public interface Expandable
{
	Object expand(Map<String, Object> mappings, boolean mutate);

	static Object expand(Object o, Map<String, Object> mappings, boolean mutate)
	{
		if (o is Expandable)
		{
			return (o as Expandable).expand(mappings, mutate);
		}
		if (o is Collection)
		{
			return expandCollection(o as Collection<_>, mappings, mutate);
		}
		if (o is Map)
		{
			return expandMap(o as Map<_, _>, mappings, mutate);
		}
		return o;
	}

	static Collection<_> expandCollection(Collection<_> collection, Map<String, Object> mappings, boolean mutate)
	{
		if (!mutate || collection.isImmutable)
		{
			return collection.mapped(e => expand(e, mappings, mutate));
		}
		collection.map(e => expand(e, mappings, true));
		return collection;
	}

	static Map<_, _> expandMap(Map<_, _> map, Map<String, Object> mappings, boolean mutate)
	{
		if (!mutate || map.isImmutable())
		{
			return map.entryMapped((k, v) => (expand(k, mappings, mutate), expand(v, mappings, mutate)));
		}
		map.mapEntries((k, v) => (expand(k, mappings, true), expand(v, mappings, true)));
		return map;
	}
}
