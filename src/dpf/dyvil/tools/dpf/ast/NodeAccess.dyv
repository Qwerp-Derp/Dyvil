package dyvil.tools.dpf.ast;

import dyvil.collection.Map;
import dyvil.tools.dpf.visitor.NodeVisitor;
import dyvil.tools.dpf.visitor.ValueVisitor;
import dyvil.tools.parsing.Name;
import dyvil.tools.parsing.ast.IASTNode;
import dyvil.tools.parsing.position.ICodePosition;

public class NodeAccess implements NodeVisitor, NodeElement, Expandable
{
	protected Name        name;
	protected NodeElement element;
	
	private ICodePosition position;
	
	public init(Name name)
	{
		this.name = name;
	}

	public init(Name name, ICodePosition position)
	{
		this.name = name;
		this.position = position;
	}

	public override void setPosition(ICodePosition position)
	{
		this.position = position;
	}
	
	public override ICodePosition getPosition()
	{
		return this.position;
	}
	
	public override Name getName()
	{
		return this.name;
	}
	
	public override NodeVisitor visitNode(Name name)
	{
		Node node = new Node(name);
		this.element = node;
		return node;
	}
	
	public override ValueVisitor visitProperty(Name name)
	{
		Property property = new Property(name);
		this.element = property;
		return property;
	}
	
	public override NodeVisitor visitNodeAccess(Name name)
	{
		NodeAccess access = new NodeAccess(name);
		this.element = access;
		return access;
	}
	
	public override void accept(NodeVisitor visitor)
	{
		this.element.accept(visitor.visitNodeAccess(this.name));
	}

	public override NodeAccess expand(Map<String, Object> mappings, boolean mutate)
	{
		NodeAccess nodeAccess = mutate ? this : new NodeAccess(this.name, this.position)
		nodeAccess.element = Expandable.expand(this.element, mappings, mutate) as NodeElement
		return nodeAccess
	}

	public override String toString() = IASTNode.toString(this)
	
	public override void toString(String indent, StringBuilder buffer)
	{
		buffer.append(this.name).append('.');
		this.element.toString(indent, buffer);
	}

	public override boolean equals(Object obj)
	{
		if (obj === this) return true
		if (!(obj is NodeAccess)) return false

		let that = obj as NodeAccess
		if (this.name !== that.name) return false
		if (this.element != that.element) return false
		return true
	}

	public override int hashCode() = 31 * this.name.hashCode + this.element.hashCode
}
