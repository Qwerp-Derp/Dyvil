package dyvil.tools.dpf.converter

import dyvil.collection.List
import dyvil.collection.Map
import dyvil.collection.mutable.ArrayList
import dyvil.collection.mutable.HashMap
import dyvil.tools.dpf.visitor._
import dyvil.tools.parsing.Name

/**
 * An abstract {@link ValueVisitor} that converts nodes to Dyvil and Java objects / wrappers according to the following
 * table:
 * <p>
 * <table summary="" border="1"> <th>Value Type</th><th>Object Type</th> <tr><td>int</td><td>dyvil.lang.Int</td></tr>
 * <tr><td>long</td><td>dyvil.lang.Long</td></tr> <tr><td>float</td><td>dyvil.lang.Float</td></tr>
 * <tr><td>double</td><td>dyvil.lang.String</td></tr> <tr><td>String</td><td>java.lang.String</td></tr>
 * <tr><td>Identifier (Access)</td><td>dyvil.tools.dpf.converter.NameAccess</td></tr>
 * <tr><td>List</td><td>dyvil.collection.List</td></tr> <tr><td>Map</td><td>dyvil.collection.Map</td></tr>
 * <tr><td>String Interpolation</td><td>dyvil.tools.dpf.converter.StringInterpolation</td></tr>
 * <tr><td>Builder</td><td>-none-</td></tr> </table>
 */
public abstract class DyvilValueVisitor implements ValueVisitor
{
	protected abstract void visitObject(Object o)
	
	public override void visitInt(int v)
	{
		this.visitObject(v);
	}
	
	public override void visitLong(long v)
	{
		this.visitObject(v);
	}
	
	public override void visitFloat(float v)
	{
		this.visitObject(v);
	}
	
	public override void visitDouble(double v)
	{
		this.visitObject(v);
	}
	
	public override void visitString(String v)
	{
		this.visitObject(v);
	}
	
	public override void visitName(Name v)
	{
		v.qualified match
		{
			case "true" {
				this.visitObject(true)
				return
			}
			case "false" {
				this.visitObject(false)
				return
			}
			case "null" {
				this.visitObject(null)
				return
			}
		}

		this.visitObject(new NameAccess(v.qualified))
	}
	
	public override ListVisitor visitList()
	{
		List<Object> list = new ArrayList<Object>
		return new ListVisitor
		{
			public override ValueVisitor visitElement() = new DyvilValueVisitor()
			{
				protected override void visitObject(Object o)
				{
					list.add(o);
				}
			}
			
			public override void visitEnd()
			{
				this<DyvilValueVisitor>.visitObject(list)
			}
		}
	}
	
	public override MapVisitor visitMap()
	{
		Map<Object, Object> map = new HashMap<Object, Object>
		return new MapVisitor
		{
			protected Object key
			
			public override ValueVisitor visitKey() = new DyvilValueVisitor
			{
				protected override void visitObject(Object o)
				{
					key = o
				}
			}
			
			public override ValueVisitor visitValue() = new DyvilValueVisitor
			{
				protected override void visitObject(Object o)
				{
				    map.put(key, o)
				}
			}
			
			public override void visitEnd()
			{
				this<DyvilValueVisitor>.visitObject(map)
			}
		}
	}
	
	public override StringInterpolationVisitor visitStringInterpolation()
	{
		StringInterpolation interpolation = new StringInterpolation
		this.visitObject(interpolation)
		return interpolation
	}

	// FIXME
	public override BuilderVisitor visitBuilder(Name name) = IgnoreVisitor
	
	public override ValueVisitor visitValueAccess(Name v)
	{
		NameAccess access = new NameAccess(v.qualified)
		this.visitObject(access)
		return access
	}
}
