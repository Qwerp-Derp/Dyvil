package dyvil.tools.dpf.converter.flatmap

import dyvil.collection.Map
import dyvil.tools.dpf.converter.DyvilValueVisitor
import dyvil.tools.dpf.visitor.NodeVisitor
import dyvil.tools.dpf.visitor.ValueVisitor
import dyvil.tools.parsing.Name

public class FlatMapConverter implements NodeVisitor
{
	protected Map<String, Object> map
	protected String              name

	public init(Map<String, Object> map)
	{
		this.map = map
		this.name = ""
	}
	
	private init(Map<String, Object> map, String name)
	{
		this.map = map
		this.name = name
	}
	
	protected String getName(Name name)
	{
		if (this.name.isEmpty)
		{
			return name.qualified
		}
		return this.name + '.' + name.qualified
	}
	
	public override NodeVisitor visitNode(Name name)
	{
		return new FlatMapConverter(this.map, this.getName(name))
	}
	
	public override NodeVisitor visitNodeAccess(Name name)
	{
		return new FlatMapConverter(this.map, this.getName(name))
	}
	
	public override ValueVisitor visitProperty(Name name) = new DyvilValueVisitor()
	{
		String propertyName = this<FlatMapConverter>.getName(name)

		protected override void visitObject(Object o)
		{
			this<FlatMapConverter>.map.put(this.propertyName, o)
		}
	}
}
