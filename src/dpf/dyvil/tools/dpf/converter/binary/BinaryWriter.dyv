package dyvil.tools.dpf.converter.binary

import dyvil.tools.dpf.visitor._
import dyvil.tools.parsing.Name

import java.io.DataOutput
import java.io.IOException

using dyvil.tools.dpf.converter.binary.BinaryConstants._

public class BinaryWriter
		implements NodeVisitor, ValueVisitor, ListVisitor, MapVisitor, StringInterpolationVisitor, BuilderVisitor
{
	private DataOutput dataOutput

	public init(DataOutput dataOutput)
	{
		this.dataOutput = dataOutput
	}

	private void writeTag(int tag)
	{
		try
		{
			this.writeTagThrowing(tag);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	private void writeTagThrowing(int tag) throws IOException
	{
		this.dataOutput.writeByte(tag as byte);
	}

	private void writeName(Name name)
	{
		try
		{
			this.dataOutput.writeUTF(name == null ? "" : name.unqualified);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	private void writeNameThrowing(Name name) throws IOException
	{
		this.dataOutput.writeUTF(name.unqualified);
	}

	private void writeTagAndName(int tag, Name name)
	{
		try
		{
			this.writeTagAndNameThrowing(tag, name);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	private void writeTagAndNameThrowing(int tag, Name name) throws IOException
	{
		this.writeTagThrowing(tag);
		this.writeNameThrowing(name);
	}

	private static void throwEx(Exception ex)
	{
		throw new RuntimeException(ex);
	}

	// NodeVisitor

	public override NodeVisitor visitNode(Name name)
	{
		this.writeTagAndName(NODE, name);
		return this;
	}

	public override ValueVisitor visitProperty(Name name)
	{
		this.writeTagAndName(PROPERTY, name);
		return this;
	}

	public override NodeVisitor visitNodeAccess(Name name)
	{
		this.writeTagAndName(NODE_ACCESS, name);
		return this;
	}

	// ValueVisitor

	public override void visitInt(int value)
	{
		try
		{
			this.writeTagThrowing(INT);
			this.dataOutput.writeInt(value);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	public override void visitLong(long value)
	{
		try
		{
			this.writeTagThrowing(LONG);
			this.dataOutput.writeLong(value);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	public override void visitFloat(float value)
	{
		try
		{
			this.writeTagThrowing(FLOAT);
			this.dataOutput.writeFloat(value);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	public override void visitDouble(double value)
	{
		try
		{
			this.writeTagThrowing(DOUBLE);
			this.dataOutput.writeDouble(value);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	public override void visitString(String value)
	{
		try
		{
			this.writeTagThrowing(STRING);
			this.dataOutput.writeUTF(value);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	public override StringInterpolationVisitor visitStringInterpolation()
	{
		this.writeTag(STRING_INTERPOLATION);
		return this;
	}

	public override void visitName(Name name)
	{
		this.writeTagAndName(NAME, name);
	}

	public override ValueVisitor visitValueAccess(Name name)
	{
		this.writeTagAndName(NAME_ACCESS, name);
		return this;
	}

	public override ListVisitor visitList()
	{
		this.writeTag(LIST);
		return this;
	}

	public override MapVisitor visitMap()
	{
		this.writeTag(MAP);
		return this;
	}

	public override BuilderVisitor visitBuilder(Name name)
	{
		this.writeTagAndName(BUILDER, name);
		return this;
	}

	// ListVisitor

	public override ValueVisitor visitElement()
	{
		return this;
	}

	// MapVisitor

	public override ValueVisitor visitKey()
	{
		return this;
	}

	// StringInterpolationVisitor

	public override void visitStringPart(String string)
	{
		try
		{
			this.dataOutput.writeUTF(string);
		}
		catch (IOException ex)
		{
			throwEx(ex);
		}
	}

	// BuilderVisitor

	public override ValueVisitor visitParameter(Name name)
	{
		this.writeName(name);
		return this;
	}

	public override NodeVisitor visitNode()
	{
		this.writeName(null);
		this.writeTag(END);
		return this;
	}

	// Shared

	public override ValueVisitor visitValue()
	{
		return this;
	}

	public override void visitEnd()
	{
		this.writeTag(END);
	}
}
