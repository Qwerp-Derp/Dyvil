package dyvil.tools.dpf.converter

import dyvil.tools.dpf.ast.builder.Builder
import dyvil.tools.dpf.ast.value._
import dyvil.tools.dpf.visitor._
import dyvil.tools.parsing.Name

public abstract class DPFValueVisitor implements ValueVisitor
{
	protected abstract void setValue(Value value);
	
	public override void visitInt(int value)
	{
		this.setValue(new IntValue(value));
	}
	
	public override void visitLong(long value)
	{
		this.setValue(new LongValue(value));
	}
	
	public override void visitFloat(float value)
	{
		this.setValue(new FloatValue(value));
	}
	
	public override void visitDouble(double value)
	{
		this.setValue(new DoubleValue(value));
	}
	
	public override void visitString(String value)
	{
		this.setValue(new StringValue(value));
	}
	
	public override StringInterpolationVisitor visitStringInterpolation()
	{
		dyvil.tools.dpf.ast.value.StringInterpolation stringInterpolation = new StringInterpolation();
		this.setValue(stringInterpolation);
		return stringInterpolation;
	}
	
	public override void visitName(Name name)
	{
		this.setValue(new dyvil.tools.dpf.ast.value.NameAccess(name));
	}
	
	public override ValueVisitor visitValueAccess(Name name)
	{
		dyvil.tools.dpf.ast.value.NameAccess access = new NameAccess(name);
		this.setValue(access);
		return access;
	}
	
	public override ListVisitor visitList()
	{
		ListValue list = new ListValue();
		this.setValue(list);
		return list;
	}
	
	public override MapVisitor visitMap()
	{
		MapValue map = new MapValue();
		this.setValue(map);
		return map;
	}
	
	public override BuilderVisitor visitBuilder(Name name)
	{
		Builder builder = new Builder(name);
		this.setValue(builder);
		return builder;
	}
}
